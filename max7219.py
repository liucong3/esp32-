# new max7219 driver that display 6 digits on a 4 block max7219 display

from micropython import const

_NOOP = const(0)
_DIGIT0 = const(1)
_DECODEMODE = const(9)
_INTENSITY = const(10)
_SCANLIMIT = const(11)
_SHUTDOWN = const(12)
_DISPLAYTEST = const(15)

bits = {
'0':[(8,5),(1,1),(2,1),(0,2),(3,2),(0,3),(3,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(1,7),(2,7)],
'1':[(8,4),(0,1),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(0,7),(1,7),(2,7)],
'2':[(8,5),(1,1),(2,1),(0,2),(3,2),(3,3),(2,4),(1,5),(0,6),(0,7),(1,7),(2,7),(3,7)],
'3':[(8,5),(1,1),(2,1),(0,2),(3,2),(3,3),(1,4),(2,4),(3,5),(3,6),(0,7),(1,7),(2,7)],
'4':[(8,6),(3,1),(2,2),(3,2),(1,3),(3,3),(1,4),(3,4),(0,5),(3,5),(0,6),(1,6),(2,6),(3,6),(4,6),(3,7)],
'5':[(8,5),(0,1),(1,1),(2,1),(3,1),(0,2),(0,3),(0,4),(1,4),(2,4),(3,5),(3,6),(0,7),(1,7),(2,7)],
'6':[(8,5),(1,1),(2,1),(3,1),(0,2),(1,2),(0,3),(0,4),(1,4),(2,4),(0,5),(3,5),(0,6),(3,6),(1,7),(2,7)],
'7':[(8,5),(0,1),(1,1),(2,1),(3,1),(3,2),(2,3),(2,4),(2,5),(1,6),(1,7)],
'8':[(8,5),(1,1),(2,1),(0,2),(3,2),(0,3),(3,3),(1,4),(2,4),(0,5),(3,5),(0,6),(3,6),(1,7),(2,7)],
'9':[(8,5),(1,1),(2,1),(0,2),(3,2),(0,3),(3,3),(0,4),(1,4),(2,4),(3,4),(3,5),(2,6),(3,6),(0,7),(1,7),(2,7)],
'A':[(8,6),(2,2),(2,3),(1,4),(3,4),(1,5),(3,5),(1,6),(2,6),(3,6),(0,7),(4,7)],
'B':[(8,5),(0,2),(1,2),(2,2),(3,2),(0,3),(3,3),(0,4),(3,4),(0,5),(1,5),(2,5),(0,6),(3,6),(0,7),(1,7),(2,7),(3,7)],
'C':[(8,6),(1,2),(2,2),(3,2),(0,3),(1,3),(4,3),(0,4),(0,5),(0,6),(1,6),(1,7),(2,7),(3,7),(4,7)],
'D':[(8,6),(0,2),(1,2),(2,2),(3,2),(0,3),(4,3),(0,4),(4,4),(0,5),(4,5),(0,6),(4,6),(0,7),(1,7),(2,7),(3,7)],
'E':[(8,5),(0,2),(1,2),(2,2),(3,2),(0,3),(0,4),(0,5),(1,5),(2,5),(3,5),(0,6),(0,7),(1,7),(2,7),(3,7)],
'F':[(8,4),(0,2),(1,2),(2,2),(0,3),(0,4),(0,5),(1,5),(2,5),(0,6),(0,7)],
'G':[(8,6),(1,2),(2,2),(3,2),(0,3),(1,3),(4,3),(0,4),(3,4),(4,4),(0,5),(4,5),(0,6),(4,6),(1,7),(2,7),(3,7)],
'H':[(8,5),(0,2),(3,2),(0,3),(3,3),(0,4),(3,4),(0,5),(1,5),(2,5),(3,5),(0,6),(3,6),(0,7),(3,7)],
'I':[(8,2),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)],
'J':[(8,3),(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(0,7),(1,7)],
'K':[(8,6),(0,2),(3,2),(0,3),(2,3),(0,4),(1,4),(0,5),(1,5),(2,5),(0,6),(2,6),(3,6),(0,7),(3,7),(4,7)],
'L':[(8,5),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7),(1,7),(2,7),(3,7)],
'M':[(8,6),(0,2),(1,2),(3,2),(4,2),(0,3),(1,3),(3,3),(4,3),(0,4),(1,4),(2,4),(3,4),(4,4),(0,5),(2,5),(4,5),(0,6),(2,6),(4,6),(0,7),(4,7)],
'N':[(8,5),(0,2),(3,2),(0,3),(1,3),(3,3),(0,4),(1,4),(3,4),(0,5),(2,5),(3,5),(0,6),(2,6),(3,6),(0,7),(3,7)],
'O':[(8,6),(1,2),(2,2),(3,2),(0,3),(4,3),(0,4),(4,4),(0,5),(4,5),(0,6),(4,6),(1,7),(2,7),(3,7)],
'P':[(8,5),(0,2),(1,2),(2,2),(3,2),(0,3),(3,3),(0,4),(1,4),(2,4),(3,4),(0,5),(0,6),(0,7)],
'Q':[(8,6),(1,1),(2,1),(3,1),(0,2),(4,2),(0,3),(4,3),(0,4),(4,4),(0,5),(4,5),(1,6),(2,6),(3,6),(3,7)],
'R':[(8,6),(0,2),(1,2),(2,2),(3,2),(0,3),(3,3),(0,4),(1,4),(2,4),(0,5),(2,5),(3,5),(0,6),(3,6),(0,7),(4,7)],
'S':[(8,5),(1,2),(2,2),(3,2),(0,3),(0,4),(1,4),(2,4),(2,5),(3,5),(3,6),(0,7),(1,7),(2,7),(3,7)],
'T':[(8,6),(0,2),(1,2),(2,2),(3,2),(4,2),(2,3),(2,4),(2,5),(2,6),(2,7)],
'U':[(8,5),(0,2),(3,2),(0,3),(3,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(1,7),(2,7)],
'V':[(8,6),(0,2),(4,2),(1,3),(3,3),(1,4),(3,4),(1,5),(3,5),(2,6),(2,7)],
'W':[(8,8),(0,2),(3,2),(6,2),(0,3),(2,3),(4,3),(6,3),(1,4),(2,4),(4,4),(5,4),(1,5),(2,5),(4,5),(5,5),(1,6),(2,6),(4,6),(5,6),(1,7),(5,7)],
'X':[(8,6),(0,2),(1,2),(3,2),(4,2),(1,3),(3,3),(2,4),(2,5),(1,6),(3,6),(0,7),(4,7)],
'Y':[(8,6),(0,2),(1,2),(3,2),(4,2),(1,3),(3,3),(2,4),(2,5),(2,6),(2,7)],
'Z':[(8,6),(0,2),(1,2),(2,2),(3,2),(4,2),(3,3),(2,4),(1,5),(2,5),(1,6),(0,7),(1,7),(2,7),(3,7),(4,7)],
'a':[(8,5),(1,3),(2,3),(3,3),(3,4),(0,5),(1,5),(2,5),(3,5),(0,6),(3,6),(0,7),(1,7),(2,7),(3,7)],
'b':[(8,5),(0,0),(0,1),(0,2),(0,3),(1,3),(2,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(0,7),(1,7),(2,7)],
'c':[(8,5),(1,3),(2,3),(3,3),(0,4),(0,5),(0,6),(1,7),(2,7),(3,7)],
'd':[(8,5),(3,0),(3,1),(3,2),(1,3),(2,3),(3,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(1,7),(2,7),(3,7)],
'e':[(8,5),(1,3),(2,3),(0,4),(3,4),(0,5),(1,5),(2,5),(3,5),(0,6),(1,7),(2,7),(3,7)],
'f':[(8,5),(1,0),(2,0),(3,0),(1,1),(1,2),(0,3),(1,3),(2,3),(1,4),(1,5),(1,6),(1,7)],
'g':[(8,5),(1,1),(2,1),(3,1),(0,2),(3,2),(0,3),(3,3),(0,4),(3,4),(1,5),(2,5),(3,5),(3,6),(1,7),(2,7)],
'h':[(8,5),(0,0),(0,1),(0,2),(0,3),(1,3),(2,3),(3,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(0,7),(3,7)],
'i':[(8,2),(0,1),(0,3),(0,4),(0,5),(0,6),(0,7)],
'j':[(8,3),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(0,7),(1,7)],
'k':[(8,5),(0,0),(0,1),(0,2),(0,3),(3,3),(0,4),(2,4),(0,5),(1,5),(0,6),(2,6),(0,7),(3,7)],
'l':[(8,2),(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)],
'm':[(8,8),(0,3),(1,3),(2,3),(3,3),(4,3),(5,3),(6,3),(0,4),(3,4),(6,4),(0,5),(3,5),(6,5),(0,6),(3,6),(6,6),(0,7),(3,7),(6,7)],
'n':[(8,5),(0,3),(1,3),(2,3),(3,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(0,7),(3,7)],
'o':[(8,5),(1,3),(2,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(1,7),(2,7)],
'p':[(8,5),(0,1),(1,1),(2,1),(0,2),(3,2),(0,3),(3,3),(0,4),(3,4),(0,5),(1,5),(2,5),(0,6),(0,7)],
'q':[(8,5),(1,1),(2,1),(3,1),(0,2),(3,2),(0,3),(3,3),(0,4),(3,4),(1,5),(2,5),(3,5),(3,6),(3,7)],
'r':[(8,4),(0,3),(1,3),(2,3),(0,4),(0,5),(0,6),(0,7)],
's':[(8,4),(0,3),(1,3),(2,3),(0,4),(1,5),(2,5),(2,6),(0,7),(1,7),(2,7)],
't':[(8,5),(1,2),(0,3),(1,3),(2,3),(3,3),(1,4),(1,5),(1,6),(1,7),(2,7),(3,7)],
'u':[(8,5),(0,3),(3,3),(0,4),(3,4),(0,5),(3,5),(0,6),(3,6),(0,7),(1,7),(2,7),(3,7)],
'v':[(8,6),(0,3),(4,3),(0,4),(4,4),(1,5),(3,5),(1,6),(3,6),(2,7)],
'w':[(8,8),(0,3),(3,3),(6,3),(0,4),(2,4),(4,4),(6,4),(0,5),(2,5),(4,5),(6,5),(1,6),(5,6),(1,7),(5,7)],
'x':[(8,6),(0,3),(4,3),(1,4),(3,4),(2,5),(1,6),(3,6),(0,7),(4,7)],
'y':[(8,6),(0,1),(4,1),(0,2),(4,2),(1,3),(3,3),(1,4),(3,4),(2,5),(2,6),(0,7),(1,7)],
'z':[(8,5),(0,3),(1,3),(2,3),(3,3),(3,4),(2,5),(1,6),(0,7),(1,7),(2,7),(3,7)],
}


class Display:
    def __init__(self, spi, cs, num):
        self.spi = spi
        self.cs = cs
        self.cs.init(cs.OUT, True)
        self.buffer = bytearray(8 * num)
        self.num = num
        self.init()

    def _write(self, command, data):
        self.cs(0)
        for m in range(self.num):
            self.spi.write(bytearray([command, data]))
        self.cs(1)

    def init(self):
        for command, data in (
            (_SHUTDOWN, 0),
            (_DISPLAYTEST, 0),
            (_SCANLIMIT, 7),
            (_DECODEMODE, 0),
            (_SHUTDOWN, 1),
        ):
            self._write(command, data)

    def brightness(self, value):
        if not 0 <= value <= 15:
            raise ValueError("Brightness out of range")
        self._write(_INTENSITY, value)

    def _text(self, text):
        for i in range(len(self.buffer)):
            self.buffer[i] = 0
        def set_bit(x,y):
            if x >= 8 * self.num or y >= 8: return
            n = x / 8
            B = self.buffer[y * self.num + n]
            B |= 1 << (x % 8)
            self.buffer[y * self.num + n] = B
        sx = 0
        for ch in text:
            bs = bits[ch]
            h,w = bs[0]
            bs = bs[1:]
            for x,y in bs:
                set_bit(sx+x,y)
            sx += w

    def show(self, text):
        self._text(text)
        for y in range(8):
            self.cs(0)
            for m in range(self.num):
                self.spi.write(bytearray([_DIGIT0 + y, self.buffer[(y * self.num) + m]]))
            self.cs(1)


# 5v（或者3v3） vcc
# GND GND
# G27 DIN
# G26 CS
# G25 CLK
DIN=27
CS=26
CLK=25
MISO=24
BLOCKS=4

def test_max7219():
    from machine import Pin, SPI
    import time
    spi = SPI(baudrate=100000, polarity=1, phase=0, mosi=Pin(DIN),sck=Pin(CLK), miso=Pin(MISO))
    display = Display(spi,Pin(CS),BLOCKS)
    count = 0
    while True:
        count += 1
        display.show('%d' % count)
        if count == 99999:
            count = 0
    # spi.deinit()
